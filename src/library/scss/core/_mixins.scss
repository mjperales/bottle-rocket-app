@charset 'UTF-8';
//=======================
// Mixins
//=======================
//========================
// CSS3 GRADIENTS
//========================

// @include css-gradient(#dfdfdf,#f8f8f8);
@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8) {
    background-color: $to;
    background-image: linear-gradient(to bottom, $from, $to);
}

// Mobile-first media query helper
@mixin media($bp) {
    @media screen and (min-width: #{$bp}) {
        @content;
    }
}

//  Max-width media query helper - usage:
//
// @include respond-below(sm) {
//   .element {
//     font-weight: bold;
//   }
// }

// A map of breakpoints.
$breakpoints: (
    xs: 576px,
    sm: 768px,
    md: 992px,
    lg: 1200px,
);

@mixin respond-below($breakpoint) {
    // If the breakpoint exists in the map.
    @if map-has-key($breakpoints, $breakpoint) {
        // Get the breakpoint value.
        $breakpoint-value: map-get($breakpoints, $breakpoint);

        // Write the media query.
        @media (max-width: ($breakpoint-value - 1)) {
            @content;
        }

        // If the breakpoint doesn't exist in the map.
    } @else {
        // Log a warning.
        @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
}

/// Checks if a list does not contains a value.
///
/// @access private
///
/// @param {List} $list
///   The list to check against.
///
/// @return {Bool}

@function contains-falsy($list) {
    @each $item in $list {
        @if not $item {
            @return true;
        }
    }

    @return false;
}

/// Directional-property mixins are shorthands for writing properties like the following
///
/// @ignore You can also use `false` instead of `null`.
///
/// @param {List} $vals
///   List of directional values
///
/// @example scss - Usage
///   .element {
///     @include border-style(dotted null);
///     @include margin(null 0 10px);
///   }
///
/// @example css - CSS Output
///   .element {
///     border-bottom-style: dotted;
///     border-top-style: dotted;
///     margin-bottom: 10px;
///     margin-left: 0;
///     margin-right: 0;
///   }
///
/// @require {function} contains-falsy
///
/// @return {List}

@function collapse-directionals($vals) {
    $output: null;

    $a: nth($vals, 1);
    $b: if(length($vals) < 2, $a, nth($vals, 2));
    $c: if(length($vals) < 3, $a, nth($vals, 3));
    $d: if(length($vals) < 2, $a, nth($vals, if(length($vals) < 4, 2, 4)));

    @if $a == 0 {
        $a: 0;
    }
    @if $b == 0 {
        $b: 0;
    }
    @if $c == 0 {
        $c: 0;
    }
    @if $d == 0 {
        $d: 0;
    }

    @if $a == $b and $a == $c and $a == $d {
        $output: $a;
    } @else if $a == $c and $b == $d {
        $output: $a $b;
    } @else if $b == $d {
        $output: $a $b $c;
    } @else {
        $output: $a $b $c $d;
    }

    @return $output;
}

/// Output directional properties, for instance `margin`.
///
/// @access private
///
/// @param {String} $pre
///   Prefix to use
/// @param {String} $suf
///   Suffix to use
/// @param {List} $vals
///   List of values
///
/// @require {function} collapse-directionals
/// @require {function} contains-falsy

@mixin directional-property($pre, $suf, $vals) {
    // Property Names
    $top: $pre + '-top' + if($suf, '-#{$suf}', '');
    $bottom: $pre + '-bottom' + if($suf, '-#{$suf}', '');
    $left: $pre + '-left' + if($suf, '-#{$suf}', '');
    $right: $pre + '-right' + if($suf, '-#{$suf}', '');
    $all: $pre + if($suf, '-#{$suf}', '');

    $vals: collapse-directionals($vals);

    @if contains-falsy($vals) {
        @if nth($vals, 1) {
            #{$top}: nth($vals, 1);
        }

        @if length($vals) == 1 {
            @if nth($vals, 1) {
                #{$right}: nth($vals, 1);
            }
        } @else {
            @if nth($vals, 2) {
                #{$right}: nth($vals, 2);
            }
        }

        @if length($vals) == 2 {
            @if nth($vals, 1) {
                #{$bottom}: nth($vals, 1);
            }
            @if nth($vals, 2) {
                #{$left}: nth($vals, 2);
            }
        } @else if length($vals) == 3 {
            @if nth($vals, 3) {
                #{$bottom}: nth($vals, 3);
            }
            @if nth($vals, 2) {
                #{$left}: nth($vals, 2);
            }
        } @else if length($vals) == 4 {
            @if nth($vals, 3) {
                #{$bottom}: nth($vals, 3);
            }
            @if nth($vals, 4) {
                #{$left}: nth($vals, 4);
            }
        }
    } @else {
        #{$all}: $vals;
    }
}

/// Provides a quick method for targeting `margin` on specific sides of a box. Use a `null` value to “skip” a side.
///
/// @param {Arglist} $vals
///   List of arguments
///
/// @example scss - Usage
///   .element {
///     @include margin(null 10px 3em 20vh);
///   }
///
/// @example css - CSS Output
///   .element {
///     margin-bottom: 3em;
///     margin-left: 20vh;
///     margin-right: 10px;
///   }
///
/// @require {mixin} directional-property
///
/// @output `margin`

@mixin margin($vals...) {
    @include directional-property(margin, false, $vals...);
}

// Fluid Type
@function strip-unit($value) {
    @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
    $u1: unit($min-vw);
    $u2: unit($max-vw);
    $u3: unit($min-font-size);
    $u4: unit($max-font-size);

    @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
        & {
            font-size: $min-font-size;
            // sass-lint:disable indentation
            @media screen and (min-width: $min-vw) {
                font-size: calc(
                    #{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} *
                        ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
                );
            }
            // sass-lint:enable indentation

            @media screen and (min-width: $max-vw) {
                font-size: $max-font-size;
            }
        }
    }
}
